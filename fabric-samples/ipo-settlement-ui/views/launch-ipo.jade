extends layout
//- include ./components/tooltips

-var investor_types=#investor_types

block content
    .container 
        nav(style="margin-top:2rem")
            #nav-tab.nav.nav-tabs(role='tablist')
                a#basic-ipo-details-tab.nav-link.active(data-bs-toggle='tab' href='#basic-ipo-details' role='tab' aria-controls='basic-ipo-details' aria-selected='true') Basic IPO Details
                a#nav-ipo-bucket-tab.nav-link(data-bs-toggle='tab' href='#nav-ipo-bucket' role='tab' aria-controls='nav-ipo-bucket' aria-selected='false' disabled) IPO Buckets
                a#nav-investor-classification-tab.nav-link(data-bs-toggle='tab' href='#nav-investor-classification' role='tab' aria-controls='nav-investor-classification' aria-selected='false' ) Investor Classification
        //- 
        div
            #nav-tabContent.tab-content
                #basic-ipo-details.tab-pane.fade.show.active(role='tabpanel' aria-labelledby='basic-ipo-details-tab')
                    form(method="post" id='basic-ipo-form')
                        .row 
                            h6 Basic IPO Details
                            label(for="bid-range" id='error_label' hidden).alert.alert-info(role='alert') 
                            .col-6
                                .form-group 
                                    label(for="issuer") Issuer Name
                                    input.form-control(type="text" name="issuer" required='true')  
                                .form-group 
                                    label(for="cusip") CUSIP
                                    input.form-control(type="text" name="cusip")  
                                .form-group 
                                    label(for="ipoStartDate") IPO Start Date
                                    input.form-control(type="datetime-local" name="ipoStartDate" id="ipoStartDate" required='true' onchange="validateDateRange('ipoStartDate','ipoEndTime','error_label')")  
                                .form-group 
                                    label(for="totalShares") Total Shares
                                    input.form-control(type="number" name="totalShares" id='totalShares' required='true')
                                .form-group 
                                    label(for="lowPrice") Low Price
                                    input.form-control(type="number" name="lowPrice" id="lowPrice" required='true' onchange='validateBidRange()')

                                label(for="principle") Allocation Principle (in the case of over-subscription)
                                    i(class="ms-2 fa-sharp fa-solid fa-circle-info" data-bs-toggle="tooltip" data-bs-html="true" title="The Allotment Principle is the method by which the IPO is allocated to investors. The Allotment Principle can be either Fixed Price or Pro Rata. If the Allotment Principle is Fixed Price, then the Fixed Price is the price at which the IPO is allocated to investors. If the Allotment Principle is Pro Rata, then the IPO is allocated to investors based on the amount of shares they have purchased.")
                                select.form-select.form-select-lg.mb-3(aria-label='.form-select-lg example' name="principle" id="a-principle" required='true' onChange="addFixedPrice()")
                                    option(value='') Select Option
                                    for principle in principles
                                        option(value=`${principle.id}`) #{principle.name}

                                label(for="agent") Paying Agent
                                select.form-select.form-select-lg.mb-3(aria-label='.form-select-lg example' name="agent" required='true' onClick="addFixedPrice()")
                                    option(value='') Select Option
                                    for agent in agents
                                        option(value=`${agent.user_id}`) #{agent.user_name}

                            .col-6
                                .form-group 
                                    label(for="isin") ISIN
                                    input.form-control(type="text" name="isin")  
                                .form-group 
                                    label(for="ticker") Ticker
                                    input.form-control(type="text" name="ticker")
                                .form-group 
                                    label(for="ipoEndTime") IPO End Date
                                    input.form-control(type="datetime-local" name="ipoEndTime" id="ipoEndTime" required='true' onchange="validateDateRange('ipoStartDate', 'ipoEndTime', 'error_label')")
                                .form-group 
                                    label(for="lotSize") Lot Size
                                    input.form-control(type="number" id="lotSize" name="lotSize" required='true')
                                .form-group 
                                    label(for="highPrice") High Price
                                    input.form-control(type="number" name="highPrice" id="highPrice" required='true' onchange='validateBidRange()')
                                .form-group
                                    label(for="fixedPrice" id='fixed-price-label' hidden) Fixed Price
                                    input.form-control(type="number" name="fixedPrice" id='fixed-price' hidden)

                            .col-12.text-right.mb-5
                                button.btn.button.btn-lg#basic-ipo-next Next

                        //- #pills-profile.tab-pane.fade(role='tabpanel' aria-labelledby='pills-profile-tab') 

                #nav-ipo-bucket.tab-pane.fade(role='tabpanel' aria-labelledby='nav-ipo-bucket-tab')
                    .row 
                        h6 Please add all pre-primary investors, their sale bucket size and priority of allotment
                        label(for="bid-range" id='error_label' hidden).alert.alert-info(role='alert')
                    form(id='buckets-form')
                        div#bucket-inputs
                            .row 
                                .col-3
                                    label(for="investorType") Investor Type
                                    select.form-control(name='investorTypeBucket-0' id="investorTypeBucket-0" data-investor-type='investorTypeBucket')
                                        option(value='') Select Option
                                        for investor in investor_types
                                            if investor.investor_type_id != 1
                                                option(value=`${investor.investor_type_id}`) #{investor.investor_type}
                                .col-3
                                    label(for="investorId") Investor Name
                                    select.form-control(name='investorId-0' id="investorId-0")
                                        option(value='') Select Option
                                        for investor in investors
                                            if investor.investor_type != 1
                                                option(value=`${investor.investor_id}`) #{investor.investor_name}
                                .col-3 
                                    .form-group 
                                        label(for="BucketSize") Bucket Size
                                        input.form-control(type="number" name="BucketSize-0" id="BucketSize-0" data-bucket-size='bucketSize')
                                .col-3 
                                    .form-group 
                                        label(for="allocPriority") Allocation Priority
                                        input.form-control(type="number" name="allocPriority-0" id="allocPriority-0" data-allocation-priority='allocPriority')
                        .row.mb-4.pb-4  
                            .col-6
                                button.btn(type="button" onClick="addBucket()")
                                    i.bi.bi-plus-circle-fill Add Bucket
                            .col-6.text-right 
                                button.button.btn-lg#ipo-bucket-next Next

                #nav-investor-classification.tab-pane.fade(role='tabpanel' aria-labelledby='nav-investor-classification-tab')
                    //- form(action="/add-investor-category" method="post") 
                    .row 
                        h6 Please add all investor categories who are allowed to participate, their reserved quota and minimum lot quantity
                    form(id='investor-classification-form')
                        div#investor-classification-inputs
                            label(for='total_result_error' id='total_result_error' name="total_result_error" hidden).alert.alert-info(role='alert')
                            br
                            label(for='total_result_text' id='total_result_text' name="total_result_text" hidden style="color: green;") Total Shares -
                            label(for='total_result' id='total_result' name="total_result" hidden style="color: green;")
                            .row 
                                .col-4
                                    label(for="investorType") Investor Type
                                    select.form-control(name='investorTypeClassification-0' id="investorTypeClassification-0" required='true')
                                        option(value='') Select Option
                                        for investor in investor_types
                                            option(value=`${investor.investor_type_id}`) #{investor.investor_type}
                                .col-4 
                                    .form-group 
                                        label(for="quota") Reserved Quota (lots) 
                                        label(for="quota0" id='quota_result' name="quota_result" hidden style="color: green;") 
                                        label(for="quota0shares" id='quota_result_shares' name="quota_result" hidden style="color: green;") 
                                        input.form-control(type="number" name="quota-0" id="quota-0" required='true' onchange="calculateQuota()")
                                .col-4 
                                    .form-group 
                                        label(for="lotQuantity") Minimum Lot Quantity
                                        input.form-control(type="number" name="lotQuantity-0" id="lotQuantity-0" required='true')
                        .row.mb-4.pb-4 
                            .col-6
                                button.mt-3.btn(type="button" onClick="addInvestorCategory()")
                                    i.bi.bi-plus-circle-fill   Add investor classification
                            .col-6.text-right
                                button.button.btn-lg(type="submit" id='final-submit-button' disabled) Submit
            form(action="/issuer/launch-ipo" method="post" id='launch-ipo-form')
                textarea#launch-ipo-textarea(name="launch-ipo" cols="30" rows="10" hidden='true')
                button.button.btn-lg(type="submit" id='launch-ipo-submit-button' hidden='true') Submit

    script(src='/js/launch-ipo.js')
    script(type="text/javascript").
        let investorCategoryId=0
        let bucketId=0
        let investorTypes = !{JSON.stringify(investor_types)};
        let investors = !{JSON.stringify(investors)};
        let bucketInputs = document.getElementById('bucket-inputs');
        let investorTypesOptions = ``
        let investorOptions = ``

        for(let i of investorTypes){
            investorTypesOptions = investorTypesOptions + `<option value="${i.investor_type_id}">${i.investor_type}</option>`
        }
        for(let i of investors){
            investorOptions = investorOptions + `<option value="${i.investor_id}">${i.investor_name?i.investor_name:""}</option>`
        }

        function addFixedPrice() {
            // Add fixed price column if allocation principle is 5
            let a_principle = document.getElementById('a-principle').value;
            if(a_principle == 5){
                document.getElementById('fixed-price-label').hidden = false;
                document.getElementById('fixed-price').hidden = false;
                document.getElementById('fixed-price').required = true;
            }
            else{
                document.getElementById('fixed-price-label').hidden = true;
                document.getElementById('fixed-price').hidden = true;
                document.getElementById('fixed-price').required = false;
            }
        }

        function addBucket() {
            bucketId = bucketId + 1
            let newInput = `
                <div class='row'>
                    <div class='col-3'>
                        <label for="investorType">Investor Type</label>
                        <select name="investorTypeBucket-${bucketId}" id="investorTypeBucket-${bucketId}" data-investor-type="investorTypeBucket" class="form-control">
                            ${investorTypesOptions}
                        </select>
                    </div>
                    <div class='col-3'>
                        <label for="investorId">Investor Name</label>
                        <select name="investorId-${bucketId}" id="investorId-${bucketId}" class="form-control mw-100">
                            ${investorOptions}
                        </select>
                    </div>
                    <div class='col-3'>
                        <div class="form-group"> 
                            <label for="BucketSize">Bucket Size</label>
                            <input type="number" name="BucketSize-${bucketId}" id="BucketSize-${bucketId}" data-bucket-size="bucketSize" class="form-control"/>
                        </div>
                    </div>
                    <div class='col-3'>
                        <div class="form-group"> 
                            <label for="allocPriority">Allocation Priority</label>
                            <input type="number" name="allocPriority-${bucketId}" id="allocPriority-${bucketId}" data-allocation-priority="allocPriority" class="form-control"/>
                        </div>
                    </div>
                </div>
            `
            $('#bucket-inputs').append(newInput);
        }

        var newInputLength = 0;
        function addInvestorCategory(){
            investorCategoryId = investorCategoryId + 1

            let newInput = `
                <div class='row'>
                    <div class='col-4'>
                        <label for="investorType">Investor Type</label>
                        <select name="investorTypeClassification-${investorCategoryId}" id="investorTypeClassification-${investorCategoryId}" data-investor-type="investorTypeClassification" class="form-control">
                            ${investorTypesOptions}
                        </select>
                    </div>
                    <div class="col-4"> 
                        <div class="form-group"> 
                            <label for="quota">Reserved Quota</label>
                            <label for="quota0_${investorCategoryId}" id="quota_result_${investorCategoryId}" hidden style="color: green;"></label>
                            <label for="quota0shares_${investorCategoryId}" id="quota_result_shares_${investorCategoryId}" hidden style="color: green;"></label>
                            <input type="number" name="quota-${investorCategoryId}" id="quota-${investorCategoryId}" class="form-control" onchange="calculateQuotaCategory(${investorCategoryId})"/>
                        </div>
                    </div>
                    <div class="col-4"> 
                        <div class="form-group"> 
                            <label for="lotQuantity">Lot Quantity</label>
                            <input type="number" name="lotQuantity-${investorCategoryId}" id="lotQuantity-${investorCategoryId}" class="form-control"/>
                        </div>
                    </div>
                </div>
            `
            $('#investor-classification-inputs').append(newInput);
            //- newInputLength = (newInput.match(/<div class='row'>/g) || []).length;
            newInputLength = newInputLength + 1;
        }

        const tabAnchor = document.querySelector('#nav-ipo-bucket-tab');
        const tabAnchor2 = document.querySelector('#nav-investor-classification-tab');

        function validateBidRange(){
            let highPrice = parseFloat(document.getElementById('highPrice').value);
            let lowPrice = parseFloat(document.getElementById('lowPrice').value);
            let errorLabel = document.getElementById('error_label');
            console.log("High Price: " + highPrice)
            console.log("Low Price: " + lowPrice)
            // Check if input is valid
            if (highPrice <= lowPrice) {
                errorLabel.innerText = 'Issue high price should be higher than the issue low price';
                errorLabel.style.fontWeight = 'bold';
                errorLabel.hidden = false;
                tabAnchor.disabled = true;
                tabAnchor2.disabled = true;
            }
            else {
                errorLabel.innerText = ''; // Clear error message
                errorLabel.hidden = true;
                isDisabled = false;
                tabAnchor.disabled = false;
                tabAnchor2.disabled = false;
            }
        }

        function calculateQuota() {
            var quota0 = parseFloat(document.getElementById('quota-0').value);
            var lotSize = parseFloat(document.getElementById('lotSize').value);
            var errorLabel = document.getElementById('quota_result');
            var errorLabelShares = document.getElementById('quota_result_shares');
            var result = quota0 * lotSize;
            console.log("RESULT CALCULATE QUOTA: " + result)
            if (result > 0){
                errorLabel.innerText = result;
                errorLabel.hidden = false;
                errorLabelShares.innerText = " - Shares";
                errorLabelShares.hidden = false;
            }
            else{
                errorLabel.innerText = 0;
                errorLabel.hidden = true;
                errorLabelShares.innerText = "";
                errorLabelShares.hidden = true;
            }
            calculateTotalShares();
        }

        function calculateQuotaCategory(investorCategoryId) {
            var quotaInput = document.getElementById(`quota-${investorCategoryId}`);
            var lotSizeInput = document.getElementById('lotSize');
            var errorLabel = document.getElementById(`quota_result_${investorCategoryId}`);
            var errorLabelShares = document.getElementById(`quota_result_shares_${investorCategoryId}`);
            var quota = parseFloat(quotaInput.value);
            var lotSize = parseFloat(lotSizeInput.value);
            var result = quota * lotSize;

            if (result > 0) {
                errorLabel.innerText = result;
                errorLabel.hidden = false;
                errorLabelShares.innerText = " - Shares";
                errorLabelShares.hidden = false;
            } else {
                errorLabel.innerText = 0;
                errorLabel.hidden = true;
                errorLabelShares.innerText = "";
                errorLabelShares.hidden = true;

            }
            calculateTotalShares();
        }

        function calculateTotalShares(){
            var quota_result_0  = parseFloat(document.getElementById('quota_result').textContent);
            var total_result_text = document.getElementById('total_result_text');
            var total_result = document.getElementById('total_result');
            var total = 0;
            console.log("NEW INPUT LENGTH",newInputLength);
            console.log("QUOTA RESULT 0",quota_result_0);
            for (var i = 1; i <= newInputLength; i++) {
                var quota_result_investor  = parseFloat(document.getElementById(`quota_result_${i}`).textContent);
                total += quota_result_investor;
            }
            console.log("NEW INPUT LENGTH",newInputLength);
            console.log("QUOTA RESULT 0",quota_result_0);
            console.log("TOTAL",total);
            if (quota_result_0 > 0){
                final_total = parseFloat(total) + quota_result_0;
                total_result.innerText = final_total;
                total_result_text.hidden = false;
                total_result.hidden = false;
            }
            else{
                total_result.innerText = 0;
                total_result_text.hidden = true;
                total_result.hidden = true;
            }
            validateTotalShares();
        }

        function validateDateRange(startDateFieldId, endDateFieldId, errorLabelId) {
            const startDateField = document.getElementById(startDateFieldId);
            const endDateField = document.getElementById(endDateFieldId);
            const errorLabel = document.getElementById(errorLabelId);

            const startDate = new Date(startDateField.value);
            const endDate = new Date(endDateField.value);

            console.log("START DATE",startDate);
            console.log("END DATE",endDate);

            // Check if start date is greater than end date
            if (startDate >= endDate) {
                errorLabel.innerText = 'Start date cannot be greater than end date.';
                errorLabel.hidden = false;
                errorCheck = true;
                tabAnchor.disabled = true;
                tabAnchor2.disabled = true;

            } else {
                errorLabel.innerText = ''; // Clear error message
                errorLabel.hidden = true;
                errorCheck = false;
                tabAnchor.disabled = false;
                tabAnchor2.disabled = false;
            }
        }

        // check if the total_result is greater than the totalShares
        function validateTotalShares() {
            console.log("VALIDATE TOTAL SHARES");
            var total_result = parseFloat(document.getElementById('total_result').textContent);
            var totalShares = parseFloat(document.getElementById('totalShares').value);
            var final_button = document.getElementById('final-submit-button');
            var errorLabel = document.getElementById('total_result_error');
            console.log("TOTAL RESULT",total_result);
            console.log("TOTAL SHARES",totalShares);
            if (total_result > totalShares) {
                errorLabel.innerText = 'Shares cannot be greater than the total shares of the issue.';
                errorLabel.hidden = false;
                final_button.disabled = true;
            } else {
                errorLabel.innerText = ''; // Clear error message
                errorLabel.hidden = true;
                final_button.disabled = false;
            }
        }

    //- function validatLotRange(){
    //-     let lotSize = document.getElementById('lotSize').value;
    //-     let quota = document.getElementById('quota-0').value;
    //-     let errorLabel2 = document.getElementById('error_label2');

    //-     console.log("Lot Size: " + lotSize)
    //-     console.log("Quota: " + quota)

    //-     // Check if input is valid
    //-     If(lotSize * quota > quota){

    //-     }
    //- }

